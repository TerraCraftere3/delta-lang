; Generated by Delta Compiler
; Input File: example.dlt
; Nasm Arguments: -f win64
; Link Arguments: /subsystem:console /entry:_start /defaultlib:kernel32.lib /defaultlib:msvcrt.lib
global _start
extern ExitProcess

section .text
_start:
; let
	mov rax, 2
	push rax
	mov rax, 3
	push rax
	mov rax, 2
	push rax
	pop rax
	pop rbx
	mul rbx
	push rax
	mov rax, 10
	push rax
	pop rax
	pop rbx
	sub rax, rbx
	push rax
	pop rax
	pop rbx
	div rbx
	push rax
; /let
; let
	mov rax, 7
	push rax
; /let
; if
	mov rax, 1
	push rax
	pop rax
	test rax, rax
	jz label0
	; Begin Scope 1
; assign
	mov rax, 1
	push rax
	pop rax
	mov [rsp+0], rax
; /assign
	; Begin Scope 2
; let
	mov rax, 3
	push rax
	mov rax, 3
	push rax
	push QWORD [rsp+24]
	pop rax
	pop rbx
	add rax, rbx
	push rax
	mov rax, 27
	push rax
	pop rax
	pop rbx
	mul rbx
	push rax
	pop rax
	pop rbx
	div rbx
	push rax
; /let
	add rsp, 8 ; Clean up 1 variable
	; End Scope 2
	; End Scope 1
	jmp label1
label0:
	; Begin Scope 1
; assign
	mov rax, 0
	push rax
	pop rax
	mov [rsp+0], rax
; /assign
	; End Scope 1
label1:
; /if
; exit
	push QWORD [rsp+0]
	pop rcx
	sub rsp, 8 ; Align stack for Windows ABI
	call ExitProcess
	add rsp, 8 ; Restore stack after call
; /exit
	mov rcx, 0
	sub rsp, 8 ; Align stack for Windows ABI
	call ExitProcess
	add rsp, 8 ; Restore stack after call
