; Generated by Delta Compiler
; Input File: example.dlt
; Nasm Arguments: -f win64
; Link Arguments: /subsystem:console /entry:_start /defaultlib:kernel32.lib /defaultlib:msvcrt.lib
global _start
extern ExitProcess

section .text
_start:
; let int64
	mov rax, 2
	push rax
	mov rax, 3
	push rax
	mov rax, 2
	push rax
	pop rax
	pop rbx
	mul rbx
	push rax
	mov rax, 10
	push rax
	pop rax
	pop rbx
	sub rax, rbx
	push rax
	pop rax
	pop rbx
	div rbx
	push rax
; /let int64
; let int8
	mov rax, 7
	push rax
; /let int8
; if
	mov rax, 1
	push rax
	pop rax
	test rax, rax
	jz label0
; Begin Scope 1
; assign int8
	mov rax, 1
	push rax
	pop rax
	mov [rsp+0], rax
; /assign int8
; Begin Scope 2
; let int64
	mov rax, 3
	push rax
	mov rax, 3
	push rax
	push QWORD [rsp+24]
	pop rax
	pop rbx
	add rax, rbx
	push rax
	mov rax, 27
	push rax
	pop rax
	pop rbx
	mul rbx
	push rax
	pop rax
	pop rbx
	div rbx
	push rax
; /let int64
; let int32
	mov rax, 1
	push rax
; /let int32
; let int16
	mov rax, 2
	push rax
; /let int16
; let int8
	mov rax, 3
	push rax
; /let int8
	add rsp, 32 ; Clean up 4 variables (32 bytes)
; End Scope 2
; End Scope 1
	jmp label1
label0:
; Begin Scope 1
; assign int8
	mov rax, 0
	push rax
	pop rax
	mov [rsp+0], rax
; /assign int8
; End Scope 1
label1:
; /if
; exit
	push QWORD [rsp+0]
	pop rcx
	sub rsp, 8 ; Align stack for Windows ABI
	call ExitProcess
	add rsp, 8 ; Restore stack after call
; /exit
	mov rcx, 0
	sub rsp, 8 ; Align stack for Windows ABI
	call ExitProcess
	add rsp, 8 ; Restore stack after call
