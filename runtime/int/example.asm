; Generated by Delta Compiler
; Input File: example.dlt
; Nasm Arguments: -f win64
; Link Arguments: /subsystem:console /entry:_start /defaultlib:kernel32.lib /defaultlib:msvcrt.lib
global _start
extern ExitProcess

section .text
_start:
; let int64 y
	mov eax, 2
	push rax
	mov eax, 3
	push rax
	mov eax, 2
	push rax
	pop rax
	pop rbx
	imul eax, ebx
	push rax
	mov eax, 10
	push rax
	pop rax
	pop rbx
	sub eax, ebx
	push rax
	pop rax
	pop rbx
	cdq
	idiv ebx
	push rax
; /let int64
; let int8 x
	mov eax, 7
	push rax
; /let int8
; if
	mov eax, 1
	push rax
	pop rax
	test rax, rax
	jz label0
; Begin Scope 1
; assign int8 x
	mov eax, 1
	push rax
	pop rax
	mov BYTE [rsp+0], al
; /assign int8
; Begin Scope 2
; let int64 a
	mov eax, 3
	push rax
	mov eax, 3
	push rax
	mov rax, QWORD [rsp+24]
	push rax
	pop rax
	pop rbx
	add rax, rbx
	push rax
	mov eax, 27
	push rax
	pop rax
	pop rbx
	imul rax, rbx
	push rax
	pop rax
	pop rbx
	cqo
	idiv rbx
	push rax
; /let int64
; let int32 b
	mov eax, 1
	push rax
; /let int32
; let int16 c
	mov eax, 2
	push rax
; /let int16
; let int8 d
	mov eax, 3
	push rax
; /let int8
	add rsp, 32 ; Clean up 4 variables (32 bytes)
; End Scope 2
; End Scope 1
	jmp label1
label0:
; Begin Scope 1
; assign int8 x
	mov eax, 0
	push rax
	pop rax
	mov BYTE [rsp+0], al
; /assign int8
; End Scope 1
label1:
; /if
; exit
	mov al, BYTE [rsp+0]
	push rax
	pop rcx
	sub rsp, 8 ; Align stack for Windows ABI
	call ExitProcess
	add rsp, 8 ; Restore stack after call
; /exit
	mov rcx, 0
	sub rsp, 8 ; Align stack for Windows ABI
	call ExitProcess
	add rsp, 8 ; Restore stack after call
