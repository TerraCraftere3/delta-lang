#include "Compiler.h"
#include "Log.h"
#include "Files.h"
#include "Tokenizer.h"
#include "Parser.h"
#include "Assembler.h"
#include "Error.h"
#include "Debug.h"
#include <fstream>

namespace Delta
{

    int Compiler::compile(const CompilerProperties &props)
    {
        Log::setVerbose(props.verbose);
        LOG_INFO("Compiling {}...", props.inputFile);
        LOG_TRACE("Compile Type: {}", getCompileTypeName(props.compileType));

        if (!Files::fileExists(props.inputFile))
        {
            LOG_ERROR("Input file does not exist: {}", props.inputFile);
            return 1;
        }

        std::string programPath = Files::getDirectory(Files::getProgramPath());
        std::string llcLink = Files::joinPaths(programPath, "llc.exe");
        if (!Files::fileExists(llcLink))
        {
            LOG_ERROR("LLVM Compiler executable not found at: {}", llcLink);
            return 1;
        }

        std::string linkPath = Files::joinPaths(programPath, "clang.exe");
        if (!Files::fileExists(linkPath))
        {
            LOG_ERROR("Linker executable not found at: {}", linkPath);
            return 1;
        }

        std::string contents = Files::readFile(props.inputFile);
        if (contents.empty())
        {
            LOG_ERROR("Failed to read input file or file is empty: {}", props.inputFile);
            return 1;
        }
        Tokenizer tokenizer(contents);
        std::vector<Token> tokens = tokenizer.tokenize();
        Parser parser(tokens);
        auto parseTree = parser.parseProgram();
        std::string assembly = "";
        if (parseTree.has_value())
        {
            Assembler assembler(parseTree.value());
            assembly = assembler.generate();
        }
        else
        {
            LOG_ERROR("Invalid Program");
            return 1;
        }

        std::string intDir = Files::joinPaths(Files::getDirectory(props.outputFile), "int");
        if (!Files::fileExists(intDir))
        {
            if (!Files::createDirectory(intDir))
            {
                LOG_ERROR("Failed to create intermediate directory: {}", intDir);
                return 1;
            }
        }
        auto writeParseFile = [&](const std::string &parseFile, const std::string &content) -> bool
        {
            if (!Files::writeFile(parseFile, content))
            {
                LOG_ERROR("Failed to write intermediate file: {}", parseFile);
                return false;
            }
            return true;
        };
        auto writeAsmFile = [&](const std::string &asmFile) -> bool
        {
            if (!Files::writeFile(asmFile, assembly))
            {
                LOG_ERROR("Failed to write intermediate file: {}", asmFile);
                return false;
            }
            return true;
        };

        auto runCommand = [&](const std::string &cmd) -> bool
        {
            LOG_TRACE("Running command: {}", cmd);
            if (std::system(cmd.c_str()) != 0)
            {
                LOG_ERROR("Failed to execute command: {}", cmd);
                return false;
            }
            return true;
        };

        // Generate file paths
        std::string baseName = Files::getFileNameWithoutExtension(props.inputFile);
        std::string parseFile = Files::joinPaths(intDir, baseName + ".ast.txt");
        std::string asmFile = Files::joinPaths(intDir, baseName + ".ll");
        std::string objFile = Files::joinPaths(intDir, baseName + ".obj");

        std::string llcArguments = "-filetype=obj";
        std::string linkArguments = "";

        std::string assemblyPrefix = "; Generated by Delta Compiler\n";
        assemblyPrefix += "; Input File: " + std::string(props.inputFile) + "\n";
        assemblyPrefix += "; llc Arguments: " + llcArguments + "\n";
        // assemblyPrefix += "; Link Arguments: " + linkArguments + "\n"; // Currently no additional Arguments
        assembly = assemblyPrefix + assembly;

        writeParseFile(parseFile, nodeDebugPrint(parseTree.value()));

        switch (props.compileType)
        {
        case COMPILE_ONLY:
        {
            if (!writeAsmFile(asmFile))
                return 1;
            std::string command = "\"" + llcLink + "\" " + llcArguments + " " + asmFile + " -o " + props.outputFile;
            if (!runCommand(command))
                return 1;
            break;
        }
        case COMPILE_AND_LINK:
        {
            if (!writeAsmFile(asmFile))
                return 1;
            std::string assembleCommand = "\"" + llcLink + "\" " + llcArguments + " " + asmFile + " -o " + objFile;
            if (!runCommand(assembleCommand))
                return 1;

            std::string linkCommand = "\"" + linkPath + "\" " + objFile + " -o " + props.outputFile + " " + linkArguments;
            if (!runCommand(linkCommand))
                return 1;
            break;
        }
        case COMPILE_LINK_AND_RUN:
        {
            if (!writeAsmFile(asmFile))
                return 1;
            std::string assembleCommand = "\"" + llcLink + "\" " + llcArguments + " " + asmFile + " -o " + objFile;
            if (!runCommand(assembleCommand))
                return 1;

            std::string linkCommand = "\"" + linkPath + "\" " + objFile + " -o " + props.outputFile + " " + linkArguments;
            if (!runCommand(linkCommand))
                return 1;

            std::string runCommandStr = "\"" + std::string(props.outputFile) + "\"";
            LOG_INFO("Running command: {}", runCommandStr);
            int exitCode = std::system(runCommandStr.c_str());
            LOG_INFO("Program exited with code: {}", exitCode);
            break;
        }
        }

        return 0;
    }

    std::string Compiler::assemble(const std::vector<Token> &tokens)
    {
        std::string output;
        output += "global _start\n";      // ASM: Text Section
        output += "extern ExitProcess\n"; // ASM: WinAPI ExitProcess
        output += "\n";                   // ASM:
        output += "section .text\n";      // ASM: Entry Point definition
        output += "_start:\n";            // ASM: Start Label
        for (int i = 0; i < tokens.size(); i++)
        {
            const Token &token = tokens[i];
            if (token.type == TokenType::exit)
            {
                if (i + 1 < tokens.size() && tokens[i + 1].type == TokenType::int_literal)
                {
                    if (i + 2 < tokens.size() && tokens[i + 2].type == TokenType::semicolon)
                    {
                        output += "\tsub rsp, 40\n";                                  // ASM: Align Stack
                        output += "\tmov ecx, " + tokens[i + 1].value.value() + "\n"; // ASM: Move literal to ecx
                        output += "\tcall ExitProcess\n";                             // ASM: Exit
                        i += 2;                                                       // Skip the next two tokens
                    }
                    else
                    {
                        LOG_ERROR("Expected ';' after integer literal");
                    }
                }
                else
                {
                    LOG_ERROR("Expected integer literal after 'return'");
                }
            }
        }
        return output;
    }
}